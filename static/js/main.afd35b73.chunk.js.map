{"version":3,"sources":["redux/actions/actionTypes.js","redux/reducers/appReducer.js","redux/reducers/servicesReducer.js","defaults/serviceFormDefaultState.js","redux/reducers/serviceFormReducer.js","redux/reducers/ServiceListPanelReducer.js","defaults/appDefaultState.js","defaults/servicesDefaultState.js","defaults/serviceListPanelDefaultState.js","redux/store.js","react/atoms/BigButton.js","react/organisms/QuickLinksPanel.js","services/serviceService.js","redux/actions/serviceListActions.js","redux/actions/serviceActions.js","redux/containers/QuickLinksPanelContainer.js","react/molecules/ServiceListFilter.js","redux/containers/ServiceListFilterContainer.js","react/molecules/ServiceItem.js","react/molecules/ServiceList.js","react/atoms/Button.js","react/organisms/ServiceListPanel.js","redux/containers/ServiceListPanelContainer.js","react/templates/ServiceListTemplate.js","redux/actions/appActions.js","react/atoms/Input.js","react/organisms/ServiceForm.js","redux/containers/ServiceFormContainer.js","react/organisms/SuccessSaveService.js","redux/containers/SuccessSaveServiceContainer.js","react/templates/ServiceFormTemplate.js","react/pages/DashboardPage.js","redux/containers/DashboardPageContainer.js","react/App.js","reportWebVitals.js","index.js"],"names":["actionTypes","UPDATE_FIELD_VALUE","SHOW_SERVICE_FORM","HIDE_SERVICE_FORM","SAVE_SERVICE_STARTED","SAVE_SERVICE_SUCCESS","SAVE_SERVICE_FAILURE","FETCH_SERVICES_STARTED","FETCH_SERVICES_SUCCESS","FETCH_SERVICES_FAILURE","UPDATE_QUERY","SET_FILTERED_SERVICES","appReducer","newState","state","action","type","cloneDeep","showModal","servicesReducer","services","payload","serviceFormDefaultState","savedService","fields","name","value","msg","version","serviceFormReducer","service","field","reducer","serviceList","serviceListFilter","query","appDefaultState","isBusy","status","servicesDefaultState","serviceListPanelDefaultState","rootReducer","combineReducers","app","serviceForm","serviceListPanel","serviceListPanelReducer","defaultState","store","createStore","applyMiddleware","reduxThunk","BigButton","props","className","children","QuickLinksPanel","id","onClick","handleAddService","disabled","token","getServicesByPage","a","page","url","fetch","method","headers","Authorization","console","error","getServices","response","json","result","data","totalPages","promises","push","Promise","all","responses","i","length","concat","validateSaveFields","isValid","postService","body","JSON","stringify","e","filterServices","filter","reg","RegExp","filtered","s","test","fetchServices","dispatch","fetchServicesSuccess","setFilteredServices","filteredServices","updateQuery","showServiceForm","serviceId","hideServiceForm","saveService","saveServiceStarted","validationResult","saveSuccessFailure","saveServiceSuccess","connect","bindActionCreators","ServiceListFilter","bind","handleSubmit","preventDefault","q","target","this","handleChange","onSubmit","onChange","placeholder","React","Component","ServiceItem","ServiceList","serviceCounter","map","Button","proptTypes","PropTypes","string","isRequired","ServiceListPanel","prevProps","isFilterApplied","isFilterDiff","isServicesDiff","content","Array","isArray","ServiceListFilterContainer","ServiceListTemplate","QuickLinksPanelContainer","ServiceListPanelContainer","updateFieldValue","Input","ServiceForm","handleCancel","handleSubmitForm","htmlFor","SuccessSaveService","onDismiss","ServiceFormTemplate","ReactModal","setAppElement","isOpen","SuccessSaveServiceContainer","ServiceFormContainer","contentLabel","defaultProps","DashboardPage","App","DashboardPageContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.afd35b73.chunk.js","sourcesContent":["// Action Types\n\nconst actionTypes = {\n    // Application level actions\n    UPDATE_FIELD_VALUE: \"UPDATE_FIELD_VALUE\",\n    // Service related actions\n    SHOW_SERVICE_FORM: \"SHOW_SERVICE_FORM\",\n    HIDE_SERVICE_FORM: \"HIDE_SERVICE_FORM\",\n    SAVE_SERVICE_STARTED: \"SAVE_SERVICE_STARTED\",\n    SAVE_SERVICE_SUCCESS: \"SAVE_SERVICE_SUCCESS\",\n    SAVE_SERVICE_FAILURE: \"SAVE_SERVICE_FAILURE\",\n\n    // Service list related actions\n    FETCH_SERVICES_STARTED: \"FETCH_SERVICES_STARTED\",\n    FETCH_SERVICES_SUCCESS: \"FETCH_SERVICES_SUCCESS\",\n    FETCH_SERVICES_FAILURE: \"FETCH_SERVICES_FAILURE\",\n    UPDATE_QUERY: \"UPDATE_QUERY\",\n    SET_FILTERED_SERVICES: \"SET_FILTERED_SERVICES\",\n\n}\n\nexport default actionTypes;\n","// Reducer for app state\r\nimport cloneDeep from \"lodash/cloneDeep\";\r\nimport actionTypes from \"../actions/actionTypes\";\r\n\r\nconst appReducer = (state = null, action) => {\r\n    let newState;\r\n    switch (action.type) {\r\n        case actionTypes.SHOW_SERVICE_FORM:\r\n            newState = cloneDeep(state);\r\n            newState.showModal = true;\r\n            return newState;\r\n        case actionTypes.HIDE_SERVICE_FORM:\r\n            newState = cloneDeep(state);\r\n            newState.showModal = false;\r\n            return newState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default appReducer;\r\n","//services reducer\r\nimport cloneDeep from \"lodash/cloneDeep\";\r\nimport actionTypes from \"../actions/actionTypes\";\r\n\r\nconst servicesReducer = (state = null, action) => {\r\n    let newState;\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_SERVICES_SUCCESS:\r\n            newState = cloneDeep(state);\r\n            newState.services = action.payload.services;\r\n            return newState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default servicesReducer;\r\n","// Default state for Service form\r\n\r\nconst serviceFormDefaultState = {\r\n    // Indicate the service has just been saved\r\n    // If not `false`, will have value object of key/value pairs of the saved service.\r\n    savedService: false,\r\n    // Fields of the form\r\n    fields: {\r\n        name: {\r\n            value: \"\",\r\n            // helper message\r\n            msg: \"\",\r\n        },\r\n        version: {\r\n            value: \"\",\r\n            // Helper message\r\n            msg: \"\",\r\n        }\r\n    }\r\n}\r\nexport default serviceFormDefaultState;\r\n","// Reducer for Service form\r\nimport cloneDeep from \"lodash/cloneDeep\";\r\nimport actionTypes from \"../actions/actionTypes\";\r\nimport serviceFormDefaultState from \"../../defaults/serviceFormDefaultState\";\r\n\r\nconst serviceFormReducer = (state = null, action) => {\r\n    let newState;\r\n    switch (action.type) {\r\n        case actionTypes.HIDE_SERVICE_FORM:\r\n            newState = cloneDeep(state);\r\n\r\n            // Reset the saved service data\r\n            newState.savedService = cloneDeep(serviceFormDefaultState.savedService);\r\n\r\n            return newState;\r\n        case actionTypes.SAVE_SERVICE_SUCCESS:\r\n            newState = cloneDeep(state);\r\n\r\n            // Reset the fields to default value\r\n            newState.fields = cloneDeep(serviceFormDefaultState.fields);\r\n            // Persist the saved service\r\n            newState.savedService = cloneDeep(action.payload.service);\r\n\r\n            return newState;\r\n        case actionTypes.SAVE_SERVICE_FAILURE:\r\n            newState = cloneDeep(state);\r\n\r\n            // Set the helper / error messages\r\n            const fields = action.payload.fields;\r\n            newState.fields.name.msg = fields.name.msg || serviceFormDefaultState.fields.name.msg;\r\n            newState.fields.version.msg = fields.version.msg || serviceFormDefaultState.fields.version.msg;\r\n\r\n            return newState;\r\n        case actionTypes.UPDATE_FIELD_VALUE:\r\n            newState = cloneDeep(state);\r\n\r\n            newState.fields[action.payload.field][\"value\"] = action.payload.value;\r\n\r\n            return newState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default serviceFormReducer\r\n","// Reducer for ServiceListPanel default state\nimport cloneDeep from \"lodash/cloneDeep\";\nimport actionTypes from \"../actions/actionTypes\";\n\nconst reducer = (state = null, action) => {\n    let newState;\n    switch (action.type) {\n        case actionTypes.SET_FILTERED_SERVICES:\n            newState = cloneDeep(state);\n\n            // Set the filtered services. Could be `null` or an array.\n            newState.serviceList.services = action.payload;\n\n            return newState;\n        case actionTypes.UPDATE_QUERY:\n            newState = cloneDeep(state);\n\n            // Update query\n            newState.serviceListFilter.query = action.payload;\n\n            return newState;\n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n","// Generice state for application\r\nconst appDefaultState = {\r\n    // To mark the whole app is busy, thus can not receive input / command\r\n    isBusy: false,\r\n    // Should show modal ?\r\n    showModal: false,\r\n    // App level message\r\n    msg: {\r\n        status: \"info\",\r\n        msg: \"default message\"\r\n    }\r\n}\r\nexport default appDefaultState;\r\n","// Default state for 'services'\r\n\r\nconst servicesDefaultState = {\r\n    // `services` is set to `null` because has not been fetched yet.\r\n    services: null,\r\n}\r\nexport default servicesDefaultState;\r\n","// <ServiceListPanel /> default state\n\nconst serviceListPanelDefaultState = {\n    // Represent <ServiceListFilter />\n    serviceListFilter: {\n        // Query string\n        query: \"\",\n    },\n    // Represent <ServiceList /> \n    serviceList: {\n        // Array for filtered service. If `null` (filter is not used), display services from `services` in the root state.\n        services: null,\n    },\n}\nexport default serviceListPanelDefaultState;\n","// Store\nimport { combineReducers, applyMiddleware, createStore } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\n// Import reducers\nimport appReducer from \"./reducers/appReducer\";\nimport servicesReducer from \"./reducers/servicesReducer\";\nimport serviceFormReducer from \"./reducers/serviceFormReducer\";\nimport serviceListPanelReducer from \"./reducers/ServiceListPanelReducer\";\n// Import default state\nimport appDefaultState from \"../defaults/appDefaultState\";\nimport servicesDefaultState from \"../defaults/servicesDefaultState\";\nimport serviceFormDefaultState from \"../defaults/serviceFormDefaultState\";\nimport serviceListPanelDefaultState from \"../defaults/serviceListPanelDefaultState\";\n\n// Reducers\nexport const rootReducer = combineReducers({\n    app: appReducer,\n    services: servicesReducer,\n    serviceForm: serviceFormReducer,\n    serviceListPanel: serviceListPanelReducer,\n});\n\n// Combine default state\nexport const defaultState = {\n    app: appDefaultState,\n    services: servicesDefaultState,\n    serviceForm: serviceFormDefaultState,\n    serviceListPanel: serviceListPanelDefaultState,\n\n}\n\n// Create Store\nconst store = createStore(rootReducer, defaultState, applyMiddleware(reduxThunk));\nexport default store;\n","// Big Buttons\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst BigButton = (props) => {\r\n    return (\r\n        <button\r\n            className=\"box btn btn-lg \"\r\n            {...props}>\r\n            {props.children}\r\n        </button>\r\n    )\r\n}\r\n\r\nBigButton.propTypes = {\r\n    children: PropTypes.string.isRequired\r\n}\r\n\r\nexport default BigButton;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport BigButton from \"../atoms/BigButton\";\r\n\r\nconst QuickLinksPanel = (props) => {\r\n    return (\r\n        <div id=\"quick-links\" className=\"section\">\r\n            <div className=\"section-header__1\">\r\n                <h2>Quick Links</h2>\r\n            </div>\r\n            <div>\r\n                <BigButton\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary btn-lg\"\r\n                    onClick={props.handleAddService}\r\n                >\r\n                    Add Service\r\n                </BigButton>\r\n                <BigButton\r\n                    disabled\r\n                    className=\"btn btn-lg disabled\"\r\n                >Deploy Gatsby Website</BigButton>\r\n                <BigButton\r\n                    disabled\r\n                    className=\"btn btn-lg disabled\"\r\n                >Deploy Node Project</BigButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nQuickLinksPanel.propTypes = {\r\n    handleAddService: PropTypes.func.isRequired\r\n}\r\nexport default QuickLinksPanel;\r\n","// Services related to service (entity)\nimport fetch from \"cross-fetch\";\nimport cloneDeep from \"lodash/cloneDeep\";\n\n// Credential. Note: since this is a client app, we do not need to hide  auth token, e.g.: put in `.env` file.s\nconst token = \"bWFyc29uOmVSZDc\";\n\n/**\n * Fetch list of `service` by page from remote end point.\n * @param {string} query - Filter/search string. Note: Currently not used, for future development.\n * @param {number} page  - page number of total services.\n * @return {Promise<response>} - Promise with argument of response from remote endpoint.\n */\nexport const getServicesByPage = async (query = null, page = 1) => {\n    // End point\n    const url = `https://interview-web-service.mountainpass.com.au/api/v1/projects?page=${page}`;\n\n    try {\n        return fetch(url, {\n            method: \"GET\",\n            headers: {\n                Authorization: `Basic ${token}`,\n            }\n        });\n    } catch (e) {\n        console.error(\"Error fetching services\");\n        console.error(e);\n    }\n}\n/**\n * Fetch all services from server.\n * @returns {array} - Array of services.\n */\nexport const getServices = async () => {\n    // Fetch the first page of services\n    const response = await getServicesByPage(null, 1);\n    const result = await response.json();\n    let services = cloneDeep(result.data);\n\n    // Total of pages available\n    const totalPages = result.totalPages;\n\n    // If total pages is 1, return the result\n    if (totalPages === 1) {\n        return services;\n    } else if (totalPages > 2) {\n        // Promises of fetch request\n        let promises = [];\n        for (let page = 2; page <= totalPages; page++) {\n            promises.push(getServicesByPage(null, page));\n        }\n\n        // Wait until all promises are resolved\n        const responses = await Promise.all(promises);\n\n        // Concat the result\n        for (let i = 0; i < responses.length; i++) {\n            const result = await responses[i].json();\n\n            services = services.concat(result.data);\n        }\n        return services;\n    } else {\n        // Something wrong\n        console.error(\"Invalid total pages when fetching services\");\n        return;\n    }\n}\n/**\n * \n * @param {object} fields  - Key/value pairs of service's fields to be saved\n * @return {object} - Object with key  `isValid` and `fields`. \n * `isValid` indicating if the fields' value is valid or not.\n */\nexport const validateSaveFields = async (fields) => {\n    // To be returned\n    const result = {\n        isValid: true,\n        fields: {\n            name: {\n                msg: '',\n            },\n            version: {\n                msg: '',\n            }\n        }\n    }\n\n    // Validate\n    if (!fields.name) {\n        result.isValid = false;\n        result.fields.name.msg = \"Name of service is required\";\n    }\n    if (!fields.version) {\n        result.isValid = false;\n        result.fields.version.msg = \"Version is required\";\n    }\n\n    return result;\n}\nexport const postService = (data) => {\n    // POST endpoint\n    const url = \"https://interview-web-service.mountainpass.com.au/api/v1/projects\";\n\n    try {\n        const body = JSON.stringify(data);\n\n        return fetch(url, {\n            method: \"POST\",\n            headers: {\n                Authorization: `Basic ${token}`,\n                \"Content-Type\": \"application/json\",\n            },\n            body\n        });\n\n    } catch (e) {\n        console.error(\"Error POST saving a service\");\n        console.error(e);\n    }\n}\n/**\n * Filter services by filter.\n * @param {object} filter  - Object containing filter params. {query:string}\n * @param {array} services  - The source services to be filtere from.\n * @return {array} - Filtered services\n */\nexport const filterServices = async (filter, services) => {\n    // Regex object\n    const reg = new RegExp(filter.query, \"i\");\n\n    // Filter\n    const filtered = services.filter((s) => {\n        return reg.test(s.name);\n    });\n\n    return filtered;\n}\n","// Actions related to list of service (plural)\nimport actionTypes from \"./actionTypes\";\nimport { getServices } from \"../../services/serviceService\";\n\n/**\n * Start fetching services\n */\nexport const fetchServices = (page = null) => {\n    return async (dispatch) => {\n        // Fetch services\n        const services = await getServices();\n\n        dispatch(fetchServicesSuccess(services));\n\n    }\n}\n\n/**\n * Successfully fetched\n */\nconst fetchServicesSuccess = (services) => {\n    return {\n        type: actionTypes.FETCH_SERVICES_SUCCESS,\n        payload: {\n            services\n        }\n    }\n}\n/**\n * Set the filtered services.\n * @param {array | null} filteredServices   - The filtered services\n * @return {action}\n */\nexport const setFilteredServices = (filteredServices) => {\n    return {\n        type: actionTypes.SET_FILTERED_SERVICES,\n        payload: filteredServices,\n    }\n}\n\nexport const updateQuery = (query) => {\n    return {\n        type: actionTypes.UPDATE_QUERY,\n        payload: query,\n    }\n}\n","// Action creators related to Service\r\nimport { validateSaveFields, postService } from \"../../services/serviceService\";\r\nimport actionTypes from \"./actionTypes\";\r\nimport { fetchServices } from \"./serviceListActions\";\r\n\r\n/**\r\n *Showing   `service` form.\r\n * @param {strings} serviceId - Service id. Default is null for creating new service. \r\n */\r\nexport const showServiceForm = (serviceId = null) => {\r\n    return {\r\n        type: actionTypes.SHOW_SERVICE_FORM,\r\n        payload: {\r\n            serviceId\r\n        }\r\n    }\r\n}\r\n/**\r\n * Hide Service form\r\n */\r\nexport const hideServiceForm = () => {\r\n    return {\r\n        type: actionTypes.HIDE_SERVICE_FORM\r\n    }\r\n}\r\n/**\r\n * Save a service and dispatch related actions.\r\n * @param {object} data  - Field/value pairs of a service to be saved.\r\n */\r\nexport const saveService = (data) => {\r\n    return async (dispatch) => {\r\n        dispatch(saveServiceStarted());\r\n\r\n        // Validate\r\n        const validationResult = await validateSaveFields(data);\r\n        if (!validationResult.isValid) {\r\n            // Failed validation\r\n            dispatch(saveSuccessFailure({\r\n                fields: validationResult.fields\r\n            }));\r\n            return;\r\n        }\r\n\r\n        // Save\r\n        await postService(data);\r\n\r\n        // Dispatch actions\r\n        dispatch(saveServiceSuccess(data));\r\n        // Fetch all available services\r\n        dispatch(fetchServices());\r\n    }\r\n}\r\nconst saveServiceStarted = () => {\r\n    return {\r\n        type: actionTypes.SAVE_SERVICE_STARTED,\r\n    }\r\n}\r\nconst saveServiceSuccess = (service) => {\r\n    return {\r\n        type: actionTypes.SAVE_SERVICE_SUCCESS,\r\n        payload: {\r\n            service\r\n        }\r\n    }\r\n}\r\nexport const saveSuccessFailure = (payload) => {\r\n    return {\r\n        type: actionTypes.SAVE_SERVICE_FAILURE,\r\n        payload,\r\n    }\r\n}\r\n","// Container to connect QuickLinksPanel\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport QuickLinksPanel from \"../../react/organisms/QuickLinksPanel\";\r\nimport { showServiceForm } from \"../actions/serviceActions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        handleAddService: showServiceForm\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuickLinksPanel);\r\n","// Service filter form \nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nclass ServiceListFilter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.updateQuery = this.updateQuery.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    updateQuery(e) {\n        e.preventDefault();\n        // Query\n        const q = e.target.value;\n        this.props.handleChange(q);\n    }\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.handleSubmit(this.props.query);\n    }\n    render() {\n\n\n        // Render\n        return (\n            <form\n                method=\"POST\"\n                onSubmit={this.handleSubmit}\n            >\n                <input\n                    type=\"text\"\n                    name=\"query\"\n                    value={this.props.query}\n                    onChange={this.updateQuery}\n                    placeholder=\"Filter service\"\n                />\n            </form>\n        )\n    }\n}\n\nServiceListFilter.propTypes = {\n    query: PropTypes.string.isRequired,\n    handleChange: PropTypes.func.isRequired,\n}\nexport default ServiceListFilter\n","// Connect <ServiceListFilter />\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { updateQuery } from \"../actions/serviceListActions\";\nimport ServiceListFilter from \"../../react/molecules/ServiceListFilter\";\n\nconst mapStateToProps = (state) => {\n    return {\n        query: state.serviceListPanel.serviceListFilter.query,\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        handleChange: updateQuery,\n    }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ServiceListFilter);\n","// Component for each service (in service list)\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ServiceItem = (props) => {\r\n\r\n    return (\r\n        <div className=\"service-item\">\r\n            <h3>{props.name}</h3>\r\n            <div>version : {props.version}</div>\r\n        </div>\r\n    )\r\n}\r\nServiceItem.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    version: PropTypes.string.isRequired\r\n}\r\nexport default ServiceItem;\r\n","// Component to show list of service\r\nimport React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport ServiceItem from \"./ServiceItem\";\r\n\r\nconst ServiceList = (props) => {\r\n    // Used as key in service list\r\n    let serviceCounter = 1;\r\n\r\n    return (\r\n        <div className=\"group\">\r\n            {props.services.map((service) => {\r\n                return <ServiceItem key={serviceCounter++} name={service.name} version={service.version} />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\nServiceList.propTypes = {\r\n    services: propTypes.array.isRequired,\r\n}\r\n\r\nexport default ServiceList\r\n","// Button component\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <button\r\n            {...props}>\r\n            {props.children}\r\n        </button>\r\n    )\r\n}\r\n\r\nButton.proptTypes = {\r\n    children: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default Button;\r\n","// Service List Panel, including filter, control buttons, and list of service\u0013\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { filterServices } from \"../../services/serviceService\";\nimport ServiceListFilterContainer from \"../../redux/containers/ServiceListFilterContainer\";\nimport ServiceList from \"../molecules/ServiceList\";\nimport Button from \"../atoms/Button\";\n\nclass ServiceListPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleAddService = this.handleAddService.bind(this);\n    }\n    componentDidMount() {\n        this.props.fetchServices();\n    }\n    componentDidUpdate(prevProps) {\n        // After update, decide whether should filter services\n        this.filterServices(prevProps);\n\n    }\n    /**\n     * Decide whether should filter services. If yes : will fiter service and dispatch the result.\n     * @param {object} prevProps \n     */\n    async filterServices(prevProps) {\n        // Query string to filter the services\n        const query = this.props.serviceListPanel.serviceListFilter.query;\n        // Is filter is applied ?\n        const isFilterApplied = query ? true : false;\n        // Is Filter different from previous filter\n        const isFilterDiff = query !== prevProps.serviceListPanel.serviceListFilter.query;\n        // Is the source (whole) services has changed ? This could be happened if a service has been added(through form in modal)\n        const isServicesDiff = this.props.services.services !== prevProps.services.services ? true : false;\n\n        // Will hold the filtered services\n        let filteredServices = null;\n        // Is the filter params has changed ?\n        if (isFilterDiff) {\n            // Is filter is currently applied ?\n            if (isFilterApplied) {\n                // Filter services\n                filteredServices = await filterServices({ query }, this.props.services.services);\n            } else {\n                // Set the filtered services to `null`. This will display the whole (source) services.\n                filteredServices = null;\n            }\n            this.props.setFilteredServices(filteredServices);\n        } else if (isFilterApplied && isServicesDiff) {\n            // If services (source) has been changed (using modal) and filter is applied, filtered services must  be re-created\n            filteredServices = await filterServices({ query }, this.props.services.services);\n            this.props.setFilteredServices(filteredServices);\n        }\n    }\n    // Handle `Add Service` button click\n    handleAddService() {\n        this.props.handleAddService();\n    }\n    render() {\n        // Display the filtered services. If falsy, display the source (whole) services.\n        const services = this.props.serviceListPanel.serviceList.services || this.props.services.services;\n        // Set the content\n        let content = <div>Loading..</div>\n        if (Array.isArray(services)) {\n            content = <ServiceList services={services} />\n        }\n\n        return (\n            <div id=\"service-list-panel\" className=\"page__default section\">\n                <div className=\"section-header__2\">\n                    <h2>Services</h2>\n                </div>\n                <div>\n                    <ServiceListFilterContainer />\n                    <Button\n                        className=\"btn btn-primary\"\n                        onClick={this.handleAddService}>\n                        Add Service\n                    </Button>\n                </div>\n                <div>\n                    {content}\n                </div>\n                <Button\n                    type=\"button\"\n                    onClick={this.handleAddService}\n                    className=\"button-box btn btn-block btn-primary\"\n                >\n                    Add Service\n                </Button>\n            </div>\n        )\n    }\n}\nServiceListPanel.propTypes = {\n    // When a `Add Service` is clicked\n    handleAddService: PropTypes.func.isRequired,\n    // Fetch `services`\n    fetchServices: PropTypes.func.isRequired,\n    // Set filtered services\n    setFilteredServices: PropTypes.func.isRequired,\n    // Total (whole) services, used as data source.\n    services: PropTypes.object.isRequired,\n}\nexport default ServiceListPanel;\n","// Connect the ServiceListPanel component\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { showServiceForm } from \"../actions/serviceActions\";\nimport { fetchServices, setFilteredServices } from \"../actions/serviceListActions\";\nimport ServiceListPanel from \"../../react/organisms/ServiceListPanel\";\n\nconst mapStateToProps = (state) => {\n    return state;\n}\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        handleAddService: showServiceForm,\n        setFilteredServices,\n        fetchServices,\n    }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ServiceListPanel);\n","// Template of service list\r\nimport React from \"react\";\r\nimport QuickLinksPanelContainer from \"../../redux/containers/QuickLinksPanelContainer\";\r\nimport ServiceListPanelContainer from \"../../redux/containers/ServiceListPanelContainer\";\r\n\r\nconst ServiceListTemplate = () => {\r\n    return (\r\n        <div >\r\n            <QuickLinksPanelContainer />\r\n            <ServiceListPanelContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ServiceListTemplate;\r\n","// Application / general level actions\r\nimport actionTypes from \"./actionTypes\";\r\n\r\n/**\r\n * Returns action to update field value (usually in a form)\r\n */\r\nexport const updateFieldValue = (field, value = \"\") => {\r\n    return {\r\n        type: actionTypes.UPDATE_FIELD_VALUE,\r\n        payload: {\r\n            field,\r\n            value,\r\n        }\r\n    }\r\n}\r\n","// Standard text input \r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Input = (props) => {\r\n    return (\r\n        <input\r\n            className=\"user-input\"\r\n            {...props} />\r\n    )\r\n}\r\nInput.propTypes = {\r\n    value: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Input;\r\n","// Service Form\r\nimport React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport Button from \"../atoms/Button\";\r\nimport Input from \"../atoms/Input\";\r\n\r\nclass ServiceForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleCancel = this.handleCancel.bind(this);\r\n        this.updateFieldValue = this.updateFieldValue.bind(this);\r\n        this.handleSubmitForm = this.handleSubmitForm.bind(this);\r\n    }\r\n    // Handle `Cancel` button\r\n    handleCancel() {\r\n        this.props.handleCancel();\r\n    }\r\n    // Handle change of afield's value\r\n    updateFieldValue(name, e) {\r\n        this.props.updateFieldValue(\r\n            name,\r\n            e.target.value\r\n        );\r\n    }\r\n    // Submit form\r\n    handleSubmitForm(e) {\r\n        e.preventDefault();\r\n\r\n        // Prepare data\r\n        const fields = this.props.serviceForm.fields;\r\n        const data = {\r\n            name: fields.name.value,\r\n            version: fields.version.value,\r\n        }\r\n        // action\r\n        this.props.saveService(data);\r\n    }\r\n    render() {\r\n        // Form fields\r\n        const fields = this.props.serviceForm.fields;\r\n\r\n        return (\r\n            <div>\r\n                <h1>Add Service</h1>\r\n                <form method=\"POST\" onSubmit={this.handleSubmitForm}>\r\n\r\n                    <div className=\"form-row\">\r\n                        <div className=\"col-md-7 col-lg-4\" >\r\n                            <label htmlFor=\"name\">Name</label>\r\n                            <Input\r\n                                name=\"name\"\r\n                                id=\"name\"\r\n                                value={fields.name.value}\r\n                                onChange={(e) => this.updateFieldValue(\"name\", e)}\r\n                                className=\"form-control\"\r\n                                aria-describedby=\"name-help-block\"\r\n                            />\r\n                            <small\r\n                                id=\"name-help-block\"\r\n                                className=\"form-text text-muted\"\r\n                            >\r\n                                {fields.name.msg}\r\n                            </small>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-row\">\r\n                        <div className=\"col-sm-2 col-lg-1\">\r\n                            <label htmlFor=\"version\">Version</label>\r\n                            <Input\r\n                                name=\"version\"\r\n                                id=\"version\"\r\n                                value={fields.version.value}\r\n                                onChange={(e) => this.updateFieldValue(\"version\", e)}\r\n                                className=\"form-control\"\r\n                                aria-describedby=\"version-help-block\"\r\n                            />\r\n                            <small\r\n                                id=\"version-help-block\"\r\n                                className=\"form-text text-muted\"\r\n                            >\r\n                                {fields.version.msg}\r\n                            </small>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div>\r\n                        <Button\r\n                            type=\"button\"\r\n                            className=\"btn btn-light\"\r\n                            onClick={this.handleCancel}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            className=\"btn btn-primary\"\r\n                        >\r\n                            Add Service\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            </div >\r\n        )\r\n    }\r\n}\r\nServiceForm.propTypes = {\r\n    saveService: propTypes.func.isRequired,\r\n}\r\nexport default ServiceForm;\r\n","// Connect <ServiceForm /> \r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { hideServiceForm, saveService } from \"../actions/serviceActions\";\r\nimport { updateFieldValue } from \"../actions/appActions\";\r\nimport ServiceForm from \"../../react/organisms/ServiceForm\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        handleCancel: hideServiceForm,\r\n        updateFieldValue,\r\n        saveService,\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ServiceForm);\r\n","// Component to show upon successfully save a service \r\nimport React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport Button from \"../atoms/Button\";\r\n\r\nconst SuccessSaveService = (props) => {\r\n    return (\r\n        <div>\r\n            <h2>Saved</h2>\r\n            <div>\r\n                The following service has been successfully saved :\r\n                <ol>\r\n                    <li>Name: {props.name}</li>\r\n                    <li>Version: {props.version}</li>\r\n                </ol>\r\n            </div>\r\n            <Button\r\n                className=\"btn btn-primary\"\r\n                onClick={props.onDismiss}\r\n            >OK</Button>\r\n        </div>\r\n    )\r\n}\r\nSuccessSaveService.propTypes = {\r\n    name: propTypes.string.isRequired,\r\n    version: propTypes.string.isRequired,\r\n    onDismiss: propTypes.func.isRequired,\r\n}\r\nexport default SuccessSaveService;\r\n","//  Container for <SuccessSaveService />\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { hideServiceForm } from \"../actions/serviceActions\";\r\nimport SuccessSaveService from \"../../react/organisms/SuccessSaveService\";\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        name: state.serviceForm.savedService.name,\r\n        version: state.serviceForm.savedService.version,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators({\r\n        onDismiss: hideServiceForm,\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SuccessSaveService);\r\n","// Service Form template\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ReactModal from \"react-modal\";\r\nimport ServiceFormContainer from \"../../redux/containers/ServiceFormContainer\";\r\nimport SuccessSaveServiceContainer from \"../../redux/containers/SuccessSaveServiceContainer\";\r\n\r\nclass ServiceFormTemplate extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // For accessibility. Read : https://reactcommunity.org/react-modal/accessibility/\r\n        // Note: `#app` will trigger `element not found` with @testing-library/react. `div` selector will select the first <div />\r\n        ReactModal.setAppElement(\"div\");\r\n    }\r\n    render() {\r\n        // Content of dialog\r\n        let content = \"loading..\";\r\n\r\n        // If Dialog is open, mount Service Form\r\n        if (this.props.isOpen) {\r\n            // Show success message\r\n            if (this.props.savedService) {\r\n                content = <SuccessSaveServiceContainer />\r\n            } else {\r\n                content = <ServiceFormContainer />\r\n            }\r\n        }\r\n\r\n        return (\r\n            <ReactModal\r\n                contentLabel=\"New Service\"\r\n                isOpen={this.props.isOpen}>\r\n                {content}\r\n            </ReactModal>\r\n        )\r\n    }\r\n}\r\n\r\nServiceFormTemplate.propTypes = {\r\n    // Is showing service form (in modal) ?\r\n    isOpen: PropTypes.bool.isRequired\r\n}\r\n\r\n// Default props\r\nServiceFormTemplate.defaultProps = {\r\n    // is the dialog containing Service Form open or not\r\n    isOpen: false\r\n}\r\n\r\nexport default ServiceFormTemplate;\r\n","// Dashboard page\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ServiceListTemplate from \"../templates/ServiceListTemplate\";\r\nimport ServiceFormTemplate from \"../templates/ServiceFormTemplate\";\r\n\r\nclass DashboardPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ServiceListTemplate />\r\n                <ServiceFormTemplate\r\n                    isOpen={this.props.app.showModal}\r\n                    savedService={this.props.serviceForm.savedService}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDashboardPage.propTypes = {\r\n    // Will show form (in modal)\r\n    showServiceForm: PropTypes.bool\r\n}\r\n\r\n// Default props\r\nDashboardPage.defaultProps = {\r\n    showServiceForm: false\r\n}\r\n\r\nexport default DashboardPage;\r\n","// Connect DashboardPage component\r\nimport { connect } from \"react-redux\";\r\nimport DashboardPage from \"../../react/pages/DashboardPage\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state\r\n}\r\n\r\nconst mapDispatchToProps = null;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DashboardPage);\r\n","// import './App.css';\nimport DashboardPageContainer from \"../redux/containers/DashboardPageContainer\";\n\nfunction App() {\n  return (\n    <div id=\"app\" className=\"App\">\n      <DashboardPageContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport App from './react/App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}