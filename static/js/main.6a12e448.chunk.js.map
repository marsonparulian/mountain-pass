{"version":3,"sources":["redux/actions/actionTypes.js","redux/reducers/appReducer.js","redux/reducers/servicesReducer.js","defaults/serviceFormDefaultState.js","redux/reducers/serviceFormReducer.js","defaults/appDefaultState.js","defaults/servicesDefaultState.js","redux/store.js","react/atoms/BigButton.js","react/organisms/QuickLinksPanel.js","services/serviceService.js","redux/actions/serviceListActions.js","redux/actions/serviceActions.js","redux/containers/QuickLinksPanelContainer.js","react/molecules/ServiceItem.js","react/molecules/ServiceList.js","react/atoms/Button.js","react/organisms/ServiceListPanel.js","redux/containers/ServiceListPanelContainer.js","react/templates/ServiceListTemplate.js","redux/actions/appActions.js","react/atoms/Input.js","react/organisms/ServiceForm.js","redux/containers/ServiceFormContainer.js","react/templates/ServiceFormTemplate.js","react/pages/DashboardPage.js","redux/containers/DashboardPageContainer.js","react/App.js","reportWebVitals.js","index.js"],"names":["actionTypes","UPDATE_FIELD_VALUE","SHOW_SERVICE_FORM","HIDE_SERVICE_FORM","FETCH_SERVICES_STARTED","FETCH_SERVICES_SUCCESS","FETCH_SERVICES_FAILURE","SAVE_SERVICE_STARTED","SAVE_SERVICE_SUCCESS","SAVE_SERVICE_FAILURE","appReducer","newState","state","action","type","cloneDeep","showModal","servicesReducer","services","payload","serviceFormDefaultState","saveSuccess","fields","name","value","msg","version","serviceFormReducer","field","appDefaultState","isBusy","status","servicesDefaultState","rootReducer","combineReducers","app","serviceForm","defaultState","store","createStore","applyMiddleware","reduxThunk","BigButton","props","className","children","QuickLinksPanel","id","onClick","handleAddService","disabled","token","getServicesByPage","a","page","url","fetch","method","headers","Authorization","console","error","getServices","response","json","result","data","totalPages","promises","push","Promise","all","responses","i","length","concat","validateSaveFields","isValid","postService","body","JSON","stringify","e","fetchServices","dispatch","fetchServicesSuccess","showServiceForm","serviceId","hideServiceForm","saveService","saveServiceStarted","validationResult","saveSuccessFailure","saveServiceSuccess","connect","bindActionCreators","ServiceItem","ServiceList","serviceCounter","map","service","Button","proptTypes","PropTypes","string","isRequired","ServiceListPanel","bind","this","content","Array","isArray","React","Component","ServiceListTemplate","QuickLinksPanelContainer","ServiceListPanelContainer","updateFieldValue","Input","ServiceForm","handleCancel","handleSubmitForm","target","preventDefault","onSubmit","htmlFor","onChange","ServiceFormTemplate","ReactModal","setAppElement","isOpen","ServiceFormContainer","contentLabel","defaultProps","DashboardPage","App","DashboardPageContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a12e448.chunk.js","sourcesContent":["// Action Types\r\n\r\nconst actionTypes = {\r\n    // Application level actions\r\n    UPDATE_FIELD_VALUE: \"UPDATE_FIELD_VALUE\",\r\n    // Service related actions\r\n    SHOW_SERVICE_FORM: \"SHOW_SERVICE_FORM\",\r\n    HIDE_SERVICE_FORM: \"HIDE_SERVICE_FORM\",\r\n    // Service list related actions\r\n    FETCH_SERVICES_STARTED: \"FETCH_SERVICES_STARTED\",\r\n    FETCH_SERVICES_SUCCESS: \"FETCH_SERVICES_SUCCESS\",\r\n    FETCH_SERVICES_FAILURE: \"FETCH_SERVICES_FAILURE\",\r\n    SAVE_SERVICE_STARTED: \"SAVE_SERVICE_STARTED\",\r\n    SAVE_SERVICE_SUCCESS: \"SAVE_SERVICE_SUCCESS\",\r\n    SAVE_SERVICE_FAILURE: \"SAVE_SERVICE_FAILURE\",\r\n}\r\n\r\nexport default actionTypes;\r\n","// Reducer for app state\r\nimport cloneDeep from \"lodash/cloneDeep\";\r\nimport actionTypes from \"../actions/actionTypes\";\r\n\r\nconst appReducer = (state = null, action) => {\r\n    let newState;\r\n    switch (action.type) {\r\n        case actionTypes.SAVE_SERVICE_SUCCESS:\r\n            newState = cloneDeep(state);\r\n\r\n            // Upon success, close form (modal)\r\n            newState.showModal = false;\r\n\r\n            return newState;\r\n        case actionTypes.SHOW_SERVICE_FORM:\r\n            newState = cloneDeep(state);\r\n            newState.showModal = true;\r\n            return newState;\r\n        case actionTypes.HIDE_SERVICE_FORM:\r\n            newState = cloneDeep(state);\r\n            newState.showModal = false;\r\n            return newState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default appReducer;\r\n","//services reducer\r\nimport cloneDeep from \"lodash/cloneDeep\";\r\nimport actionTypes from \"../actions/actionTypes\";\r\n\r\nconst servicesReducer = (state = null, action) => {\r\n    let newState;\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_SERVICES_SUCCESS:\r\n            newState = cloneDeep(state);\r\n            newState.services = action.payload.services;\r\n            return newState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default servicesReducer;\r\n","// Default state for Service form\r\n\r\nconst serviceFormDefaultState = {\r\n    // Indicate if a form just has been successfully submitted\r\n    saveSuccess: false,\r\n    // Fields of the form\r\n    fields: {\r\n        name: {\r\n            value: \"\",\r\n            // helper message\r\n            msg: \"\",\r\n        },\r\n        version: {\r\n            value: \"\",\r\n            // Helper message\r\n            msg: \"\",\r\n        }\r\n    }\r\n}\r\nexport default serviceFormDefaultState;\r\n","// Reducer for Service form\r\nimport cloneDeep from \"lodash/cloneDeep\";\r\nimport actionTypes from \"../actions/actionTypes\";\r\nimport serviceFormDefaultState from \"../../defaults/serviceFormDefaultState\";\r\n\r\nconst serviceFormReducer = (state = null, action) => {\r\n    let newState;\r\n    switch (action.type) {\r\n        case actionTypes.SAVE_SERVICE_SUCCESS:\r\n            newState = cloneDeep(state);\r\n\r\n            // Reset the fields to default value\r\n            newState.fields = cloneDeep(serviceFormDefaultState.fields);\r\n\r\n            return newState;\r\n        case actionTypes.SAVE_SERVICE_FAILURE:\r\n            newState = cloneDeep(state);\r\n\r\n            // Set the helper / error messages\r\n            const fields = action.payload.fields;\r\n            newState.fields.name.msg = fields.name.msg || serviceFormDefaultState.fields.name.msg;\r\n            newState.fields.version.msg = fields.version.msg || serviceFormDefaultState.fields.version.msg;\r\n\r\n            return newState;\r\n        case actionTypes.UPDATE_FIELD_VALUE:\r\n            newState = cloneDeep(state);\r\n\r\n            newState.fields[action.payload.field][\"value\"] = action.payload.value;\r\n\r\n            return newState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default serviceFormReducer\r\n","// Generice state for application\r\nconst appDefaultState = {\r\n    // To mark the whole app is busy, thus can not receive input / command\r\n    isBusy: false,\r\n    // Should show modal ?\r\n    showModal: false,\r\n    // App level message\r\n    msg: {\r\n        status: \"info\",\r\n        msg: \"default message\"\r\n    }\r\n}\r\nexport default appDefaultState;\r\n","// Default state for 'services'\r\n\r\nconst servicesDefaultState = {\r\n    // `services` is set to `null` because has not been fetched yet.\r\n    services: null,\r\n}\r\nexport default servicesDefaultState;\r\n","// Store\r\nimport { combineReducers, applyMiddleware, createStore } from \"redux\";\r\nimport reduxThunk from \"redux-thunk\";\r\n// Import reducers\r\nimport appReducer from \"./reducers/appReducer\";\r\nimport servicesReducer from \"./reducers/servicesReducer\";\r\nimport serviceFormReducer from \"./reducers/serviceFormReducer\";\r\n// Import default state\r\nimport appDefaultState from \"../defaults/appDefaultState\";\r\nimport servicesDefaultState from \"../defaults/servicesDefaultState\";\r\nimport serviceFormDefaultState from \"../defaults/serviceFormDefaultState\";\r\n\r\n// Reducers\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    services: servicesReducer,\r\n    serviceForm: serviceFormReducer,\r\n});\r\n\r\n// Combine default state\r\nexport const defaultState = {\r\n    app: appDefaultState,\r\n    services: servicesDefaultState,\r\n    serviceForm: serviceFormDefaultState,\r\n}\r\n\r\n// Create Store\r\nconst store = createStore(rootReducer, defaultState, applyMiddleware(reduxThunk));\r\nexport default store;\r\n","// Big Buttons\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst BigButton = (props) => {\r\n    return (\r\n        <button\r\n            className=\"box btn btn-lg \"\r\n            {...props}>\r\n            {props.children}\r\n        </button>\r\n    )\r\n}\r\n\r\nBigButton.propTypes = {\r\n    children: PropTypes.string.isRequired\r\n}\r\n\r\nexport default BigButton;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport BigButton from \"../atoms/BigButton\";\r\n\r\nconst QuickLinksPanel = (props) => {\r\n    return (\r\n        <div id=\"quick-links\">\r\n            <div className=\"section-header__1\">\r\n                <h2>Quick Links</h2>\r\n            </div>\r\n            <div>\r\n                <BigButton\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary btn-lg\"\r\n                    onClick={props.handleAddService}\r\n                >\r\n                    Add Service\r\n                </BigButton>\r\n                <BigButton\r\n                    disabled\r\n                    className=\"btn btn-lg disabled\"\r\n                >Deploy Gatsby Website</BigButton>\r\n                <BigButton\r\n                    disabled\r\n                    className=\"btn btn-lg disabled\"\r\n                >Deploy Node Project</BigButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nQuickLinksPanel.propTypes = {\r\n    handleAddService: PropTypes.func.isRequired\r\n}\r\nexport default QuickLinksPanel;\r\n","// Services related to service (entity)\r\nimport fetch from \"cross-fetch\";\r\nimport cloneDeep from \"lodash/cloneDeep\";\r\n\r\n// Credential. Note: since this is a client app, we do not need to hide  auth token, e.g.: put in `.env` file.s\r\nconst token = \"bWFyc29uOmVSZDc\";\r\n\r\n/**\r\n * Fetch list of `service` by page from remote end point.\r\n * @param {string} query - Filter/search string. Note: Currently not used, for future development.\r\n * @param {number} page  - page number of total services.\r\n * @return {Promise<response>} - Promise with argument of response from remote endpoint.\r\n */\r\nexport const getServicesByPage = async (query = null, page = 1) => {\r\n    // End point\r\n    const url = `https://interview-web-service.mountainpass.com.au/api/v1/projects?page=${page}`;\r\n\r\n    try {\r\n        return fetch(url, {\r\n            method: \"GET\",\r\n            headers: {\r\n                Authorization: `Basic ${token}`,\r\n            }\r\n        });\r\n    } catch (e) {\r\n        console.error(\"Error fetching services\");\r\n        console.error(e);\r\n    }\r\n}\r\n/**\r\n * Fetch all services from server.\r\n * @returns {array} - Array of services.\r\n */\r\nexport const getServices = async () => {\r\n    // Fetch the first page of services\r\n    const response = await getServicesByPage(null, 1);\r\n    const result = await response.json();\r\n    let services = cloneDeep(result.data);\r\n\r\n    // Total of pages available\r\n    const totalPages = result.totalPages;\r\n\r\n    // If total pages is 1, return the result\r\n    if (totalPages === 1) {\r\n        return services;\r\n    } else if (totalPages > 2) {\r\n        // Promises of fetch request\r\n        let promises = [];\r\n        for (let page = 2; page <= totalPages; page++) {\r\n            promises.push(getServicesByPage(null, page));\r\n        }\r\n\r\n        // Wait until all promises are resolved\r\n        const responses = await Promise.all(promises);\r\n\r\n        // Concat the result\r\n        for (let i = 0; i < responses.length; i++) {\r\n            const result = await responses[i].json();\r\n\r\n            services = services.concat(result.data);\r\n        }\r\n        return services;\r\n    } else {\r\n        // Something wrong\r\n        console.error(\"Invalid total pages when fetching services\");\r\n        return;\r\n    }\r\n}\r\n/**\r\n * \r\n * @param {object} fields  - Key/value pairs of service's fields to be saved\r\n * @return {object} - Object with key  `isValid` and `fields`. \r\n * `isValid` indicating if the fields' value is valid or not.\r\n */\r\nexport const validateSaveFields = async (fields) => {\r\n    // To be returned\r\n    const result = {\r\n        isValid: true,\r\n        fields: {\r\n            name: {\r\n                msg: '',\r\n            },\r\n            version: {\r\n                msg: '',\r\n            }\r\n        }\r\n    }\r\n\r\n    // Validate\r\n    if (!fields.name) {\r\n        result.isValid = false;\r\n        result.fields.name.msg = \"Name of service is required\";\r\n    }\r\n    if (!fields.version) {\r\n        result.isValid = false;\r\n        result.fields.version.msg = \"Version is required\";\r\n    }\r\n\r\n    return result;\r\n}\r\nexport const postService = (data) => {\r\n    // POST endpoint\r\n    const url = \"https://interview-web-service.mountainpass.com.au/api/v1/projects\";\r\n\r\n    try {\r\n        const body = JSON.stringify(data);\r\n\r\n        return fetch(url, {\r\n            method: \"POST\",\r\n            headers: {\r\n                Authorization: `Basic ${token}`,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body\r\n        });\r\n\r\n    } catch (e) {\r\n        console.error(\"Error POST saving a service\");\r\n        console.error(e);\r\n    }\r\n}\r\n","// Actions related to list of service (plural)\r\nimport actionTypes from \"./actionTypes\";\r\nimport { getServices } from \"../../services/serviceService\";\r\n\r\n/**\r\n * Start fetching services\r\n */\r\nexport const fetchServices = (page = null) => {\r\n    return async (dispatch) => {\r\n        // Fetch services\r\n        const services = await getServices();\r\n        \r\n        dispatch(fetchServicesSuccess(services));\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * Successfully fetched\r\n */\r\nconst fetchServicesSuccess = (services) => {\r\n    return {\r\n        type: actionTypes.FETCH_SERVICES_SUCCESS,\r\n        payload: {\r\n            services\r\n        }\r\n    }\r\n}\r\n","// Action creators related to Service\r\nimport { validateSaveFields, postService } from \"../../services/serviceService\";\r\nimport actionTypes from \"./actionTypes\";\r\nimport { fetchServices } from \"./serviceListActions\";\r\n\r\n/**\r\n *Showing   `service` form.\r\n * @param {strings} serviceId - Service id. Default is null for creating new service. \r\n */\r\nexport const showServiceForm = (serviceId = null) => {\r\n    return {\r\n        type: actionTypes.SHOW_SERVICE_FORM,\r\n        payload: {\r\n            serviceId\r\n        }\r\n    }\r\n}\r\n/**\r\n * Hide Service form\r\n */\r\nexport const hideServiceForm = () => {\r\n    return {\r\n        type: actionTypes.HIDE_SERVICE_FORM\r\n    }\r\n}\r\n/**\r\n * Save a service and dispatch related actions.\r\n * @param {object} data  - Field/value pairs of a service to be saved.\r\n */\r\nexport const saveService = (data) => {\r\n    return async (dispatch) => {\r\n        dispatch(saveServiceStarted());\r\n\r\n        // Validate\r\n        const validationResult = await validateSaveFields(data);\r\n        if (!validationResult.isValid) {\r\n            // Failed validation\r\n            dispatch(saveSuccessFailure({\r\n                fields: validationResult.fields\r\n            }));\r\n            return;\r\n        }\r\n\r\n        // Save\r\n        await postService(data);\r\n\r\n        // Dispatch actions\r\n        dispatch(saveServiceSuccess());\r\n        // Fetch all available services\r\n        dispatch(fetchServices());\r\n    }\r\n}\r\nconst saveServiceStarted = () => {\r\n    return {\r\n        type: actionTypes.SAVE_SERVICE_STARTED,\r\n    }\r\n}\r\nconst saveServiceSuccess = () => {\r\n    return {\r\n        type: actionTypes.SAVE_SERVICE_SUCCESS,\r\n    }\r\n}\r\nexport const saveSuccessFailure = (payload) => {\r\n    return {\r\n        type: actionTypes.SAVE_SERVICE_FAILURE,\r\n        payload,\r\n    }\r\n}\r\n","// Container to connect QuickLinksPanel\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport QuickLinksPanel from \"../../react/organisms/QuickLinksPanel\";\r\nimport { showServiceForm } from \"../actions/serviceActions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        handleAddService: showServiceForm\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuickLinksPanel);\r\n","// Component for each service (in service list)\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ServiceItem = (props) => {\r\n\r\n    return (\r\n        <div >\r\n            <div>{props.name}</div>\r\n            <div>version : {props.version}</div>\r\n        </div>\r\n    )\r\n}\r\nServiceItem.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    version: PropTypes.string.isRequired\r\n}\r\nexport default ServiceItem;\r\n","// Component to show list of service\r\nimport React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport ServiceItem from \"./ServiceItem\";\r\n\r\nconst ServiceList = (props) => {\r\n    // Used as key in service list\r\n    let serviceCounter = 1;\r\n\r\n    return (\r\n        <div className=\"group\">\r\n            {props.services.map((service) => {\r\n                return <ServiceItem key={serviceCounter++} name={service.name} version={service.version} />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\nServiceList.propTypes = {\r\n    services: propTypes.array.isRequired,\r\n}\r\n\r\nexport default ServiceList\r\n","// Button component\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <button\r\n            {...props}>\r\n            {props.children}\r\n        </button>\r\n    )\r\n}\r\n\r\nButton.proptTypes = {\r\n    children: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default Button;\r\n","// Service List Panel, including filter, control buttons, and list of service\u0013\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ServiceList from \"../molecules/ServiceList\";\r\nimport Button from \"../atoms/Button\";\r\n\r\nclass ServiceListPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleAddService = this.handleAddService.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchServices();\r\n    }\r\n    // Handle `Add Service` button click\r\n    handleAddService() {\r\n        this.props.handleAddService();\r\n    }\r\n    render() {\r\n        // Set the content\r\n        let content = <div>Loading..</div>\r\n        if (Array.isArray(this.props.services.services)) {\r\n            content = <ServiceList services={this.props.services.services} />\r\n        }\r\n\r\n        return (\r\n            <div id=\"service-list-panel\" className=\"page__default\">\r\n                <div className=\"section-header__2\">\r\n                    <h2>Services</h2>\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        className=\"btn btn-primary\"\r\n                        onClick={this.handleAddService}>\r\n                        Add Service\r\n                    </Button>\r\n                </div>\r\n                <div>\r\n                    {content}\r\n                </div>\r\n                <Button\r\n                    type=\"button\"\r\n                    onClick={this.handleAddService}\r\n                    className=\"button-box btn btn-block btn-primary\"\r\n                >\r\n                    Add Service\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nServiceListPanel.propTypes = {\r\n    // When a `Add Service` is clicked\r\n    handleAddService: PropTypes.func.isRequired,\r\n    // Fetch `services`\r\n    fetchServices: PropTypes.func.isRequired,\r\n    // Fetched services\r\n    services: PropTypes.object.isRequired,\r\n}\r\nexport default ServiceListPanel;\r\n","// Connect the ServiceListPanel component\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { showServiceForm } from \"../actions/serviceActions\";\r\nimport { fetchServices } from \"../actions/serviceListActions\";\r\nimport ServiceListPanel from \"../../react/organisms/ServiceListPanel\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        handleAddService: showServiceForm,\r\n        fetchServices,\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ServiceListPanel);\r\n","// Template of service list\r\nimport React from \"react\";\r\nimport QuickLinksPanelContainer from \"../../redux/containers/QuickLinksPanelContainer\";\r\nimport ServiceListPanelContainer from \"../../redux/containers/ServiceListPanelContainer\";\r\n\r\nconst ServiceListTemplate = () => {\r\n    return (\r\n        <div >\r\n            <QuickLinksPanelContainer />\r\n            <ServiceListPanelContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ServiceListTemplate;\r\n","// Application / general level actions\r\nimport actionTypes from \"./actionTypes\";\r\n\r\n/**\r\n * Returns action to update field value (usually in a form)\r\n */\r\nexport const updateFieldValue = (field, value = \"\") => {\r\n    return {\r\n        type: actionTypes.UPDATE_FIELD_VALUE,\r\n        payload: {\r\n            field,\r\n            value,\r\n        }\r\n    }\r\n}\r\n","// Standard text input \r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Input = (props) => {\r\n    return (\r\n        <input\r\n            className=\"user-input\"\r\n            {...props} />\r\n    )\r\n}\r\nInput.propTypes = {\r\n    value: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Input;\r\n","// Service Form\r\nimport React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport Button from \"../atoms/Button\";\r\nimport Input from \"../atoms/Input\";\r\n\r\nclass ServiceForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleCancel = this.handleCancel.bind(this);\r\n        this.updateFieldValue = this.updateFieldValue.bind(this);\r\n        this.handleSubmitForm = this.handleSubmitForm.bind(this);\r\n    }\r\n    // Handle `Cancel` button\r\n    handleCancel() {\r\n        this.props.handleCancel();\r\n    }\r\n    // Handle change of afield's value\r\n    updateFieldValue(name, e) {\r\n        this.props.updateFieldValue(\r\n            name,\r\n            e.target.value\r\n        );\r\n    }\r\n    // Submit form\r\n    handleSubmitForm(e) {\r\n        e.preventDefault();\r\n\r\n        // Prepare data\r\n        const fields = this.props.serviceForm.fields;\r\n        const data = {\r\n            name: fields.name.value,\r\n            version: fields.version.value,\r\n        }\r\n        // action\r\n        this.props.saveService(data);\r\n    }\r\n    render() {\r\n        // Form fields\r\n        const fields = this.props.serviceForm.fields;\r\n\r\n        return (\r\n            <div>\r\n                <h1>Add Service</h1>\r\n                <form method=\"POST\" onSubmit={this.handleSubmitForm}>\r\n\r\n                    <div className=\"form-row\">\r\n                        <div className=\"col-md-7 col-lg-4\" >\r\n                            <label htmlFor=\"name\">Name</label>\r\n                            <Input\r\n                                name=\"name\"\r\n                                id=\"name\"\r\n                                value={fields.name.value}\r\n                                onChange={(e) => this.updateFieldValue(\"name\", e)}\r\n                                className=\"form-control\"\r\n                                aria-describedby=\"name-help-block\"\r\n                            />\r\n                            <small\r\n                                id=\"name-help-block\"\r\n                                className=\"form-text text-muted\"\r\n                            >\r\n                                {fields.name.msg}\r\n                            </small>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-row\">\r\n                        <div className=\"col-sm-2 col-lg-1\">\r\n                            <label htmlFor=\"version\">Version</label>\r\n                            <Input\r\n                                name=\"version\"\r\n                                id=\"version\"\r\n                                value={fields.version.value}\r\n                                onChange={(e) => this.updateFieldValue(\"version\", e)}\r\n                                className=\"form-control\"\r\n                                aria-describedby=\"version-help-block\"\r\n                            />\r\n                            <small\r\n                                id=\"version-help-block\"\r\n                                className=\"form-text text-muted\"\r\n                            >\r\n                                {fields.version.msg}\r\n                            </small>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div>\r\n                        <Button\r\n                            type=\"button\"\r\n                            className=\"btn btn-light\"\r\n                            onClick={this.handleCancel}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            className=\"btn btn-primary\"\r\n                        >\r\n                            Add Service\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            </div >\r\n        )\r\n    }\r\n}\r\nServiceForm.propTypes = {\r\n    saveService: propTypes.func.isRequired,\r\n}\r\nexport default ServiceForm;\r\n","// Connect <ServiceForm /> \r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { hideServiceForm, saveService } from \"../actions/serviceActions\";\r\nimport { updateFieldValue } from \"../actions/appActions\";\r\nimport ServiceForm from \"../../react/organisms/ServiceForm\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        handleCancel: hideServiceForm,\r\n        updateFieldValue,\r\n        saveService,\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ServiceForm);\r\n","// Service Form template\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ReactModal from \"react-modal\";\r\nimport ServiceFormContainer from \"../../redux/containers/ServiceFormContainer\";\r\n\r\nclass ServiceFormTemplate extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // For accessibility. Read : https://reactcommunity.org/react-modal/accessibility/\r\n        // Note: `#app` will trigger `element not found` with @testing-library/react. `div` selector will select the first <div />\r\n        ReactModal.setAppElement(\"div\");\r\n    }\r\n    render() {\r\n        // Content of dialog\r\n        let content = \"loading..\";\r\n\r\n        // If Dialog is open, mount Service Form\r\n        if (this.props.isOpen) {\r\n            content = <ServiceFormContainer />\r\n        }\r\n\r\n        return (\r\n            <ReactModal\r\n                contentLabel=\"New Service\"\r\n                isOpen={this.props.isOpen}>\r\n                {content}\r\n            </ReactModal>\r\n        )\r\n    }\r\n}\r\n\r\nServiceFormTemplate.propTypes = {\r\n    // Is showing service form (in modal) ?\r\n    isOpen: PropTypes.bool.isRequired\r\n}\r\n\r\n// Default props\r\nServiceFormTemplate.defaultProps = {\r\n    // is the dialog containing Service Form open or not\r\n    isOpen: false\r\n}\r\n\r\nexport default ServiceFormTemplate;\r\n","// Dashboard page\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ServiceListTemplate from \"../templates/ServiceListTemplate\";\r\nimport ServiceFormTemplate from \"../templates/ServiceFormTemplate\";\r\n\r\nclass DashboardPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ServiceListTemplate />\r\n                <ServiceFormTemplate isOpen={this.props.app.showModal} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDashboardPage.propTypes = {\r\n    // Will show form (in modal)\r\n    showServiceForm: PropTypes.bool\r\n}\r\n\r\n// Default props\r\nDashboardPage.defaultProps = {\r\n    showServiceForm: false\r\n}\r\n\r\nexport default DashboardPage;\r\n","// Connect DashboardPage component\r\nimport { connect } from \"react-redux\";\r\nimport DashboardPage from \"../../react/pages/DashboardPage\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state\r\n}\r\n\r\nconst mapDispatchToProps = null;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DashboardPage);\r\n","// import './App.css';\nimport DashboardPageContainer from \"../redux/containers/DashboardPageContainer\";\n\nfunction App() {\n  return (\n    <div id=\"app\" className=\"App\">\n      <DashboardPageContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport App from './react/App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}